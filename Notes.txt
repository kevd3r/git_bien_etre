PROJET NEXT.JS - GÎTE BIEN-ÊTRE DE MARINE & CHRISTOPHE
-------------------------------------------------------

OBJECTIF :
Créer un site web léger, esthétique et performant pour un gîte bien-être avec 5 pages principales, un dashboard pour la gestion des réservations et événements, en respectant les bonnes pratiques de code et d’architecture.

TECHNOLOGIES :
- Framework : Next.js (App Router, dernières fonctionnalités)
- Styling : Tailwind CSS
- Base de données : MySQL
- ORM : Prisma (recommandé)
- Authentification : Auth.js (ex-NextAuth)
- Calendrier : FullCalendar.js ou alternative légère
- Déploiement : Vercel ou autre (selon préférence)

STRUCTURE DU SITE (FRONTEND) :
1. Accueil (`/`)
2. Hébergement (`/hebergement`)
3. Soins Bien-Être (`/soins`)
4. Réservations (`/reservations`)
5. Tableau de bord (privé) (`/admin`)

PHASE 1 – INITIALISATION DU PROJET
----------------------------------
- [X] Créer le projet avec `npx create-next-app`
- [X] Configurer Tailwind CSS
- [X] Nettoyer le projet des fichiers inutiles
- [ ] Structurer les dossiers :
    - `components/`
    - `app/` (avec sous-dossiers par page)
    - `lib/` (fonctions réutilisables)
    - `styles/` (fichiers Tailwind si besoin)
    - `utils/` (helpers, constantes)
- [ ] Configurer le linting (`eslint`, `prettier`)
- [ ] Ajouter le fichier `.env.local` pour variables sensibles

PHASE 2 – CRÉATION DES PAGES PUBLIQUES
--------------------------------------
- [ ] Page Accueil : présentation du gîte, ambiance, visuels
- [ ] Page Hébergement : chambres, photos, tarifs
- [ ] Page Soins Bien-Être : types de soins, praticiens
- [ ] Page Réservations : formulaire de demande + calendrier des disponibilités (lecture seule)

PHASE 3 – BACKEND & BASE DE DONNÉES
-----------------------------------
- [ ] Installer Prisma et connecter MySQL
- [ ] Modéliser la base :
    - Utilisateur (admin)
    - Événement (titre, description, date, durée, places)
    - Réservation (nom, email, date, type de soin ou hébergement, statut)
- [ ] Générer le schéma et migrer la BDD
- [ ] Créer les API routes pour :
    - Ajouter, modifier, supprimer un événement
    - Gérer les réservations
    - Authentification (admin uniquement)

PHASE 4 – DASHBOARD ADMIN
-------------------------
- [ ] Page `/admin` protégée (login)
- [ ] Liste des événements (CRUD)
- [ ] Vue calendrier des réservations
- [ ] Bouton pour marquer un événement comme complet
- [ ] Responsive design pour gestion mobile/tablette

PHASE 5 – AMÉLIORATIONS & QUALITÉ
---------------------------------
- [ ] Ajout d’une validation (Zod ou Yup)
- [ ] Loader & messages d’erreur utilisateur
- [ ] Optimisation images (Next/Image)
- [ ] Accessibilité (WAI-ARIA, couleurs, contraste)
- [ ] SEO de base : balises meta, titres, descriptions
- [ ] Ajout d’un favicon et manifest
- [ ] Sauvegarde BDD et monitoring

BONNES PRATIQUES À RESPECTER :
------------------------------
- Composants réutilisables et typés
- Ne pas surcharger les pages (`page.tsx`) avec la logique
- Utiliser `async/await` proprement
- Respecter la séparation des responsabilités (UI vs logique)
- Écrire du code lisible et commenté si nécessaire
- Commits fréquents et clairs (Git)


ARCHITECTURE GLOBALE :
----------------------

gite-bien-etre/
│
├── app/                            # Pages et routes (App Router)
│   ├── layout.js                   # Layout principal
│   ├── page.js                     # Page d'accueil (/)
│   ├── hebergement/
│   │   └── page.js
│   ├── soins/
│   │   └── page.js
│   ├── reservations/
│   │   └── page.js
│   ├── admin/
│   │   ├── layout.js               # Layout spécifique admin
│   │   ├── page.js
│   │   ├── reservations/
│   │   │   └── page.js
│   │   └── events/
│   │       └── page.js
│   └── api/                        # Routes API (backend)
│       ├── auth/[...nextauth]/route.js
│       ├── reservations/route.js
│       └── events/route.js
│
├── components/                     # Composants réutilisables
│   ├── layout/
│   │   ├── Header.js
│   │   └── Footer.js
│   ├── ui/
│   │   ├── Button.js
│   │   └── Input.js
│   ├── cards/
│   │   ├── EventCard.js
│   │   └── ReservationCard.js
│   └── calendar/
│       └── FullCalendarWrapper.js
│
├── lib/                            # Logique serveur, db, auth
│   ├── auth.js
│   └── prisma.js
│
├── prisma/
│   └── schema.prisma
│
├── public/
│   ├── images/
│   │   ├── accueil/
│   │   ├── hebergement/
│   │   ├── soins/
│   │   └── logo/
│   └── favicon.ico
│
├── styles/
│   └── globals.css
│
├── utils/
│   ├── validations.js
│   └── constants.js
│
├── .env.local
├── .eslintrc.cjs                  # Format CommonJS pour ESLint en JS
├── .prettierrc
├── Dockerfile
├── docker-compose.yml
├── next.config.js
├── package.json
└── README.md

SCHEMA PRISMA :
---------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  reservations Reservation[]
  events      Event[]
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  duration    Int       // en minutes
  capacity    Int       // nombre de places disponibles
  isFull      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?

  reservations Reservation[]
}

model Reservation {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  type        ReservationType
  date        DateTime
  status      ReservationStatus @default(PENDING)
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?

  event       Event?    @relation(fields: [eventId], references: [id])
  eventId     Int?
}

enum Role {
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ReservationType {
  HEBERGEMENT
  SOIN
  EVENEMENT
}

